
14、构造过程

    构造过程是使用类、结构体或枚举类型的实例之前的准备过程。
    在新实例使用前有个过程是必须的，它包括设置实例中每个存储属性的初始值和执行其他必须的设置或构造过程。
    你要通过定义构造器来实现构造过程，它就像用来创建特定类型新实例的特殊方法。
    与 Objective-C 中的构造器不同，Swift 的构造器没有返回值。
    它们的主要任务是保证某种类型的新实例在第一次使用前完成正确的初始化。

    // 结构体的逐一成员构造器
    结构体如果没有定义任何自定义构造器，它们将自动获得一个逐一成员构造器（memberwise initializer）。
    不像默认构造器，即使存储型属性没有默认值，结构体也能会获得逐一成员构造器。
    逐一成员构造器是用来初始化结构体新实例里成员属性的快捷方法。
    新实例的属性初始值可以通过名字传入逐一成员构造器中。
        
    // 指定构造器和便利构造
    指定构造器是类中最主要的构造器。一个指定构造器将初始化类中提供的所有属性，并调用合适的父类构造器让构造过程沿着父类链继续往上进行。
    类倾向于拥有极少的指定构造器，普遍的是一个类只拥有一个指定构造器。指定构造器像一个个“漏斗”放在构造过程发生的地方，让构造过程沿着父类链继续往上进行。
    每一个类都必须至少拥有一个指定构造器。在某些情况下，许多类通过继承了父类中的指定构造器而满足了这个条件。具体内容请参考后续章节 构造器的自动继承。
    便利构造器是类中比较次要的、辅助型的构造器。你可以定义便利构造器来调用同一个类中的指定构造器，并为部分形参提供默认值。你也可以定义便利构造器来创建一个特殊用途或特定输入值的实例。
    你应当只在必要的时候为类提供便利构造器，比方说某种情况下通过使用便利构造器来快捷调用某个指定构造器，能够节省更多开发时间并让类的构造过程更清晰明了。
     
    // 类类型的构造器代理
    为了简化指定构造器和便利构造器之间的调用关系，Swift 构造器之间的代理调用遵循以下三条规则：
    规则 1 指定构造器必须调用其直接父类的的指定构造器。
    规则 2 便利构造器必须调用同类中定义的其它构造器。
    规则 3 便利构造器最后必须调用指定构造器。
    一个更方便记忆的方法是：
    指定构造器必须总是向上代理
    便利构造器必须总是横向代理
        
    // 两段式构造过程
    Swift 中类的构造过程包含两个阶段。
    第一个阶段，类中的每个存储型属性赋一个初始值。当每个存储型属性的初始值被赋值后，
    第二阶段开始，它给每个类一次机会，在新实例准备使用之前进一步自定义它们的存储型属性。
    两段式构造过程的使用让构造过程更安全，同时在整个类层级结构中给予了每个类完全的灵活性。
    两段式构造过程可以防止属性值在初始化之前被访问，也可以防止属性被另外一个构造器意外地赋予不同的值。
    
    // 构造器的继承和重写
    跟 Objective-C 中的子类不同，Swift 中的子类默认情况下不会继承父类的构造器。
    Swift 的这种机制可以防止一个父类的简单构造器被一个更精细的子类继承，
    而在用来创建子类时的新实例时没有完全或错误被初始化。
        
        
    //可失败的构造器
    有时，定义一个构造器可失败的类，结构体或者枚举是很有用的。
    这里所指的“失败” 指的是，如给构造器传入无效的形参，或缺少某种所需的外部资源，
    又或是不满足某种必要的条件等。
    为了妥善处理这种构造过程中可能会失败的情况。
    你可以在一个类，结构体或是枚举类型的定义中，添加一个或多个可失败构造器。
    其语法为在 init 关键字后面添加问号（init?）。
    
================================
AMInitPart1
================================

1.1 存储属性的初始赋值

1.2 自定义构造过程

================================
AMInitPart2
================================

1.1 默认构造器

1.2 值类型的构造器代理

1.3 类的继承和构造过程

1.4 指定构造器和便利构造器实践

================================
AMInitPart3
================================

1.1 可失败构造器

1.2 枚举类型的可失败构造器

1.3 带原始值的枚举类型的可失败构造器

1.4 构造失败的传递

1.5 init! 可失败构造器

1.6 必要构造器

1.7 通过闭包或函数设置属性的默认值
