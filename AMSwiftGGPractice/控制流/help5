

5、控制流

     Swift 提供了多种流程控制结构，包括可以多次执行任务的 while 循环，基于特定条件选择执行不同代码分支的 if、guard 和 switch 语句，还有控制流程跳转到其他代码位置的 break 和 continue 语句。
     Swift 还提供了 for-in 循环，用来更简单地遍历数组（Array），字典（Dictionary），区间（Range），字符串（String）和其他序列类型。
     Swift 的 switch 语句比许多类 C 语言要更加强大。case 还可以匹配很多不同的模式，包括范围匹配，元组（tuple）和特定类型匹配。switch 语句的 case 中匹配的值可以声明为临时常量或变量，在 case 作用域内使用，也可以配合 where 来描述更复杂的匹配条件。

     // while 循环
     while 循环会一直运行一段语句直到条件变成 false。
     这类循环适合使用在第一次迭代前，迭代次数未知的情况下。
     Swift 提供两种 while 循环形式：
     while 循环，每次在循环开始时计算条件是否符合；
     repeat-while 循环，每次在循环结束时计算条件是否符合。
    
     // switch
     与 C 和 Objective-C 中的 switch 语句不同，在 Swift 中，
     当匹配的 case 分支中的代码执行完毕后，程序会终止 switch 语句，
     而不会继续执行下一个 case 分支。这也就是说，不需要在 case 分支中显式地使用 break 语句。
     这使得 switch 语句更安全、更易用，也避免了漏写 break 语句导致多个语言被执行的错误。
       
     控制转移语句改变你代码的执行顺序，通过它可以实现代码的跳转。Swift 有五种控制转移语句：
     continue
     break
     fallthrough
     return
     throw
     
================================
AMIfPart1
================================

1.1 For-In 循环

1.2 While 循环

1.3 条件语句 If

1.4 条件语句 switch

================================
AMIfPart2
================================

1.1 continue

1.2 break

1.3 Fallthrough

1.4 带标签的语句

1.5 提前退出

1.6 检测 API 可用性
