

4、集合类型

    Swift 语言提供数组（Array）、集合（Set）和字典（Dictionary）三种基本的集合类型用来存储集合数据。
    数组是有序数据的集。集合是无序无重复数据的集。字典是无序的键值对的集。
    
    Swift 中的数组、集合和字典必须明确其中保存的键和值类型，这样就可以避免插入一个错误数据类型的值。
    同理，对于获取到的值你也可以放心，其数据类型是确定的。
    
    // 集合的可变性
    如果创建一个数组、集合或字典并且把它分配成一个变量，这个集合将会是可变的。
    这意味着可以在创建之后添加、修改或者删除数据项。如果把数组、集合或字典分配成常量，
    那么它就是不可变的，它的大小和内容都不能被改变。

    // 数组
    数组使用有序列表存储同一类型的多个值。相同的值可以多次出现在一个数组的不同位置中。
    Swift 的 Array 类型被桥接到 Foundation 中的 NSArray 类。
    
    Swift 中数组的完整写法为 Array<Element>，其中 Element 是这个数组中唯一允许存在的数据类型。
    也可以使用像 [Element] 这样的简单语法。
    尽管两种形式在功能上是一样的，但是推荐较短的那种，而且在本文中都会使用这种形式来使用数组。

    // 集合
    集合用来存储相同类型并且没有确定顺序的值。
    当集合元素顺序不重要时或者希望确保每个元素只出现一次时可以使用集合而不是数组。
    // 集合类型的哈希值
    一个类型为了存储在集合中，该类型必须是可哈希化的——也就是说，该类型必须提供一个方法来计算它的哈希值。
    一个哈希值是 Int 类型的，相等的对象哈希值必须相同，比如 a == b,因此必须 a.hashValue == b.hashValue。
    
    Swift 的所有基本类型（比如 String、Int、Double 和 Bool）默认都是可哈希化的，可以作为集合值的类型或者字典键的类型。
    没有关联值的枚举成员值（在 枚举 有讲述）默认也是可哈希化的。

    // 字典
    字典是一种无序的集合，它存储的是键值对之间的关系，其所有键的值需要是相同的类型，所有值的类型也需要相同
    每个值（value）都关联唯一的键（key），键作为字典中这个值数据的标识符。
    和数组中的数据项不同，字典中的数据项并没有具体顺序。
    你在需要通过标识符（键）访问数据的时候使用字典，
    这种方法很大程度上和在现实世界中使用字典查字义的方法一样。
    一个字典的 Key 类型必须遵循 Hashable 协议，就像 Set 的值类型。
    
================================
AMSetPart1
================================

1.1 数组

1.2 数组的遍历

================================
AMSetPart2
================================

1.1 集合

1.2 基本集合操作

================================
AMSetPart3
================================

1.1 字典

1.2 字典遍历
