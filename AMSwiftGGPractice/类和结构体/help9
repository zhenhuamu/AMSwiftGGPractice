
9、类和结构体

    结构体和类作为一种通用而又灵活的结构，成为了人们构建代码的基础。
     你可以使用定义常量、变量和函数的语法，为你的结构体和类定义属性、添加方法。
    与其他编程语言所不同的是，Swift 并不要求你为自定义的结构体和类的接口与实现代码分别创建文件。
     你只需在单一的文件中定义一个结构体或者类，系统将会自动生成面向其它代码的外部接口。

    // Swift 中结构体和类有很多共同点
    ①定义属性用于存储值
    ②定义方法用于提供功能
    ③定义下标操作用于通过下标语法访问它们的值
    ④定义构造器用于设置初始值
    ⑤通过扩展以增加默认实现之外的功能
    ⑥遵循协议以提供某种标准功能
    
    // 与结构体相比，类还有如下的附加功能：
    ①继承允许一个类继承另一个类的特征
    ②类型转换允许在运行时检查和解释一个类实例的类型
    ③析构器允许一个类实例释放任何其所被分配的资源
    ④引用计数允许对一个类的多次引用

    类支持的附加功能是以增加复杂性为代价的。
    作为一般准则，优先使用结构体，因为它们更容易理解，仅在适当或必要时才使用类。

    // 值类型是这样一种类型，当它被赋值给一个变量、常量或者被传递给一个函数的时候，其值会被拷贝。
    在之前的章节中，你已经大量使用了值类型。
    实际上，Swift 中所有的基本类型：整数（integer）、浮点数（floating-point number）、布尔值（boolean）、字符串（string)、数组（array）和字典（dictionary），
    都是值类型，其底层也是使用结构体实现的。*/
    
    Swift 中所有的结构体和枚举类型都是值类型。
    这意味着它们的实例，以及实例中所包含的任何值类型的属性，在代码中传递的时候都会被复制。
     
================================
AMClassAndStructPart1
================================
